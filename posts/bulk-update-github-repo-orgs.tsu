---
id: bulk-update-github-repo-orgs
title: Quick Tip: Bulk Update Github Repo Orgs
category: Quick Tips
status: published
published: 2019-07-05 21:40
preview: >
  A quick one-liner for bulk updating the Organization name in the remote URL for
  all of your cloned Github repos. This is specifically useful when you rename an
  Organization in Github. (Hooray for rebranding!)
---

I recently needed to rename a Github Organization with about 80 repositories. While
Github helpfully creates automated redirects for your repos during the rename
process, it is still [best practice](https://help.github.com/en/articles/renaming-an-organization#changes-that-occur-automatically)
to go through and update the remote URLs for all repos you have cloned on
your computer.

This is a pretty simple process for a single repository. You just need to set your
remote URL to use the new Organization name (`NewOrgName` in this example).
```bash
> git remote set-url origin git@github.com:NewOrgName/my-repo.git
```
_Note: This post assumes that your remote repo is named `origin` and you cloned via SSH, please adjust accordingly._

Now, if you are like me you probably have something like 50 repos that you'll need
to perform this operation on. So instead of doing data entry for an hour, I put together
this little bash one-liner that loops through my repos and performs the update.
```bash
for d in ./*/ ; do (cd "$d" && git remote set-url origin $(git remote get-url origin | sed s/:OldOrgName\\//:NewOrgName\\//) && echo "Remote Updated: $d"); done
```

A few notes about this script:

- It loops through the direct children of your current directory and uses `sed` to
  replace the old org name with your new org name. This means your directory structure must look
  something like this for this to work:

```
- directory/
  - repo-1/
  - repo-2/
  - etc...
```

- Make sure you update the `OldOrgName` and `NewOrgName` values to reflect your actual values.
